//
// Created by anton on 02.09.2024.
//
#include <bits/stdc++.h>

using namespace std;

/**
 * Гоблины Мглистых гор очень любят ходить к своим шаманам.
 * Так как гоблинов много, к шаманам часто образуются очень длинные очереди.
 * А поскольку много гоблинов в одном месте быстро образуют шумную толпу,
 * которая мешает шаманам проводить сложные медицинские манипуляции,
 * последние решили установить некоторые правила касательно порядка в очереди.
 *
 * Обычные гоблины при посещении шаманов должны вставать в конец очереди.
 * Привилегированные же гоблины, знающие особый пароль, встают ровно в ее середину,
 * причем при нечетной длине очереди они встают сразу за центром.
 *
 * Так как гоблины также широко известны своим непочтительным отношением ко всяческим правилам и законам,
 * шаманы попросили вас написать программу, которая бы отслеживала порядок гоблинов в очереди.
 *
 * Входные данные
 * В первой строке входных данный записано число N - количество запросов к программе.
 * Следующие N строк содержат описание запросов в формате:
 * + i: гоблин с номером i (1  ≤  i  ≤  N) встает в конец очереди.
 * * i: привилегированный гоблин с номером i встает в середину очереди.
 * - : первый гоблин из очереди уходит к шаманам. Гарантируется, что на момент такого запроса очередь не пуста.
 *
 * Выходные данные
 * Для каждого запроса типа "-" программа должна вывести номер гоблина, который должен зайти к шаманам.
 *
 */
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;

    deque<int> end;
    deque<int> start;

    char x;
    int y;
    while (n--) {
        cin >> x;
        if (x == '+') {
            cin >> y;
            end.push_back(y);
        } else if (x == '*') {
            cin >> y;
            if (end.empty() && start.empty()) {
                end.push_back(y);
            } else {
                while (end.size() > start.size()) {
                    start.push_back(end.front());
                    end.pop_front();
                }
                while (start.size() - end.size() > 1) {
                    end.push_front(start.back());
                    start.pop_back();
                }
                end.push_front(y);
            }
        } else if (x == '-') {
            if (start.empty()) {
                cout << end.front() << '\n';
                end.pop_front();
            } else {
                cout << start.front() << '\n';
                start.pop_front();
            }
        }
    }
}